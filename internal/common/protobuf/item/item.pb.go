// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: item.proto

package item

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// WarehouseRequest -
type WarehouseRequest struct {
	// 商品名稱
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 數量
	Quantity int64 `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// 銷售單價
	SalePrice int64 `protobuf:"varint,3,opt,name=sale_price,json=salePrice,proto3" json:"sale_price,omitempty"`
	// 單價成本
	CostPrice int64 `protobuf:"varint,4,opt,name=cost_price,json=costPrice,proto3" json:"cost_price,omitempty"`
}

func (m *WarehouseRequest) Reset()         { *m = WarehouseRequest{} }
func (m *WarehouseRequest) String() string { return proto.CompactTextString(m) }
func (*WarehouseRequest) ProtoMessage()    {}
func (*WarehouseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6007f868cf6553df, []int{0}
}
func (m *WarehouseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WarehouseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WarehouseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WarehouseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WarehouseRequest.Merge(m, src)
}
func (m *WarehouseRequest) XXX_Size() int {
	return m.Size()
}
func (m *WarehouseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WarehouseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WarehouseRequest proto.InternalMessageInfo

func (m *WarehouseRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WarehouseRequest) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *WarehouseRequest) GetSalePrice() int64 {
	if m != nil {
		return m.SalePrice
	}
	return 0
}

func (m *WarehouseRequest) GetCostPrice() int64 {
	if m != nil {
		return m.CostPrice
	}
	return 0
}

// ShelfRequest -
type ShelfRequest struct {
	// 商品編號
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 狀態
	Status uint32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *ShelfRequest) Reset()         { *m = ShelfRequest{} }
func (m *ShelfRequest) String() string { return proto.CompactTextString(m) }
func (*ShelfRequest) ProtoMessage()    {}
func (*ShelfRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6007f868cf6553df, []int{1}
}
func (m *ShelfRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShelfRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShelfRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShelfRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShelfRequest.Merge(m, src)
}
func (m *ShelfRequest) XXX_Size() int {
	return m.Size()
}
func (m *ShelfRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShelfRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShelfRequest proto.InternalMessageInfo

func (m *ShelfRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ShelfRequest) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

// PurchaseRequest -
type PurchaseRequest struct {
	// 進貨商品列表
	List []*PurchaseItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (m *PurchaseRequest) Reset()         { *m = PurchaseRequest{} }
func (m *PurchaseRequest) String() string { return proto.CompactTextString(m) }
func (*PurchaseRequest) ProtoMessage()    {}
func (*PurchaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6007f868cf6553df, []int{2}
}
func (m *PurchaseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PurchaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PurchaseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PurchaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PurchaseRequest.Merge(m, src)
}
func (m *PurchaseRequest) XXX_Size() int {
	return m.Size()
}
func (m *PurchaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PurchaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PurchaseRequest proto.InternalMessageInfo

func (m *PurchaseRequest) GetList() []*PurchaseItem {
	if m != nil {
		return m.List
	}
	return nil
}

// PurchaseItem -
type PurchaseItem struct {
	// 商品編號
	ItemId string `protobuf:"bytes,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	// 進貨數量
	Quantity int64 `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (m *PurchaseItem) Reset()         { *m = PurchaseItem{} }
func (m *PurchaseItem) String() string { return proto.CompactTextString(m) }
func (*PurchaseItem) ProtoMessage()    {}
func (*PurchaseItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_6007f868cf6553df, []int{3}
}
func (m *PurchaseItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PurchaseItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PurchaseItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PurchaseItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PurchaseItem.Merge(m, src)
}
func (m *PurchaseItem) XXX_Size() int {
	return m.Size()
}
func (m *PurchaseItem) XXX_DiscardUnknown() {
	xxx_messageInfo_PurchaseItem.DiscardUnknown(m)
}

var xxx_messageInfo_PurchaseItem proto.InternalMessageInfo

func (m *PurchaseItem) GetItemId() string {
	if m != nil {
		return m.ItemId
	}
	return ""
}

func (m *PurchaseItem) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

type Empty struct {
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_6007f868cf6553df, []int{4}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*WarehouseRequest)(nil), "item.WarehouseRequest")
	proto.RegisterType((*ShelfRequest)(nil), "item.ShelfRequest")
	proto.RegisterType((*PurchaseRequest)(nil), "item.PurchaseRequest")
	proto.RegisterType((*PurchaseItem)(nil), "item.PurchaseItem")
	proto.RegisterType((*Empty)(nil), "item.Empty")
}

func init() { proto.RegisterFile("item.proto", fileDescriptor_6007f868cf6553df) }

var fileDescriptor_6007f868cf6553df = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xcd, 0x4e, 0xf2, 0x40,
	0x14, 0x65, 0xa0, 0xfc, 0x5d, 0xf8, 0x7e, 0x32, 0x89, 0xd8, 0x10, 0x9d, 0x90, 0x2e, 0x4c, 0x37,
	0x16, 0x83, 0x89, 0x89, 0x5b, 0x8d, 0x0b, 0x76, 0xa4, 0x2c, 0x5c, 0x92, 0x52, 0x06, 0x3a, 0x09,
	0x65, 0xa0, 0x33, 0x63, 0xc2, 0xce, 0x47, 0x70, 0xeb, 0x1b, 0xb9, 0x64, 0xe9, 0x52, 0xe1, 0x05,
	0x7c, 0x04, 0x33, 0xd3, 0x82, 0x60, 0x8c, 0xbb, 0x7b, 0xce, 0xb9, 0x9d, 0x73, 0xee, 0x49, 0x01,
	0x98, 0xa4, 0xb1, 0x37, 0x4f, 0xb8, 0xe4, 0xd8, 0xd2, 0x73, 0xf3, 0x7c, 0xc2, 0x64, 0xa4, 0x86,
	0x5e, 0xc8, 0xe3, 0xf6, 0x84, 0x4f, 0x78, 0xdb, 0x88, 0x43, 0x35, 0x36, 0xc8, 0x00, 0x33, 0xa5,
	0x1f, 0x39, 0x8f, 0x08, 0xfe, 0xdf, 0x07, 0x09, 0x8d, 0xb8, 0x12, 0xd4, 0xa7, 0x0b, 0x45, 0x85,
	0xc4, 0x18, 0xac, 0x59, 0x10, 0x53, 0x1b, 0xb5, 0x90, 0x5b, 0xf5, 0xcd, 0x8c, 0x9b, 0x50, 0x59,
	0xa8, 0x60, 0x26, 0x99, 0x5c, 0xda, 0xf9, 0x16, 0x72, 0x0b, 0xfe, 0x0e, 0xe3, 0x53, 0x00, 0x11,
	0x4c, 0xe9, 0x60, 0x9e, 0xb0, 0x90, 0xda, 0x05, 0xa3, 0x56, 0x35, 0xd3, 0xd3, 0x84, 0x96, 0x43,
	0x2e, 0x64, 0x26, 0x5b, 0xa9, 0xac, 0x19, 0x23, 0x3b, 0x57, 0x50, 0xef, 0x47, 0x74, 0x3a, 0xde,
	0xba, 0xff, 0x85, 0x3c, 0x1b, 0x65, 0xde, 0x79, 0x36, 0xc2, 0x0d, 0x28, 0x09, 0x19, 0x48, 0x25,
	0x8c, 0xef, 0x1f, 0x3f, 0x43, 0xce, 0x35, 0xfc, 0xeb, 0xa9, 0x24, 0x8c, 0x82, 0xaf, 0xe0, 0x67,
	0x60, 0x4d, 0x99, 0x90, 0x36, 0x6a, 0x15, 0xdc, 0x5a, 0x07, 0x7b, 0xa6, 0x9d, 0xed, 0x52, 0x57,
	0xd2, 0xd8, 0x37, 0xba, 0x73, 0x0b, 0xf5, 0x7d, 0x16, 0x1f, 0x43, 0x59, 0xaf, 0x0e, 0x76, 0xbe,
	0x25, 0x0d, 0xbb, 0xa3, 0xdf, 0xae, 0x76, 0xca, 0x50, 0xbc, 0x8b, 0xe7, 0x72, 0xd9, 0x79, 0x46,
	0x50, 0xd3, 0xcf, 0xf4, 0x69, 0xf2, 0xa0, 0xef, 0xbd, 0x80, 0xea, 0xae, 0x52, 0xdc, 0x48, 0x43,
	0x7c, 0xef, 0xb8, 0x59, 0x4b, 0x79, 0xf3, 0x02, 0x76, 0xa1, 0x68, 0x2a, 0xc0, 0x59, 0xe4, 0xfd,
	0x3e, 0x0e, 0x37, 0x3d, 0xa8, 0x6c, 0x93, 0xe3, 0xa3, 0xc3, 0xfb, 0x7e, 0xda, 0xbf, 0x39, 0xf9,
	0x78, 0x27, 0xe8, 0x65, 0x4d, 0xd0, 0x6a, 0x4d, 0xd0, 0xdb, 0x9a, 0xa0, 0xa7, 0x0d, 0xc9, 0xad,
	0x36, 0x24, 0xf7, 0xba, 0x21, 0xb9, 0x61, 0xc9, 0xfc, 0x04, 0x97, 0x9f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xc5, 0x9f, 0x9b, 0x4d, 0x47, 0x02, 0x00, 0x00,
}

func (this *WarehouseRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&item.WarehouseRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Quantity: "+fmt.Sprintf("%#v", this.Quantity)+",\n")
	s = append(s, "SalePrice: "+fmt.Sprintf("%#v", this.SalePrice)+",\n")
	s = append(s, "CostPrice: "+fmt.Sprintf("%#v", this.CostPrice)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShelfRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&item.ShelfRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PurchaseRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&item.PurchaseRequest{")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PurchaseItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&item.PurchaseItem{")
	s = append(s, "ItemId: "+fmt.Sprintf("%#v", this.ItemId)+",\n")
	s = append(s, "Quantity: "+fmt.Sprintf("%#v", this.Quantity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Empty) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&item.Empty{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringItem(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ItemServiceClient is the client API for ItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ItemServiceClient interface {
	// Warehouse - 商品入庫
	Warehouse(ctx context.Context, in *WarehouseRequest, opts ...grpc.CallOption) (*Empty, error)
	// Shelf - 上下架
	Shelf(ctx context.Context, in *ShelfRequest, opts ...grpc.CallOption) (*Empty, error)
	// Purchase - 進貨
	Purchase(ctx context.Context, in *PurchaseRequest, opts ...grpc.CallOption) (*Empty, error)
}

type itemServiceClient struct {
	cc *grpc.ClientConn
}

func NewItemServiceClient(cc *grpc.ClientConn) ItemServiceClient {
	return &itemServiceClient{cc}
}

func (c *itemServiceClient) Warehouse(ctx context.Context, in *WarehouseRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/item.ItemService/Warehouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) Shelf(ctx context.Context, in *ShelfRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/item.ItemService/Shelf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) Purchase(ctx context.Context, in *PurchaseRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/item.ItemService/Purchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemServiceServer is the server API for ItemService service.
type ItemServiceServer interface {
	// Warehouse - 商品入庫
	Warehouse(context.Context, *WarehouseRequest) (*Empty, error)
	// Shelf - 上下架
	Shelf(context.Context, *ShelfRequest) (*Empty, error)
	// Purchase - 進貨
	Purchase(context.Context, *PurchaseRequest) (*Empty, error)
}

// UnimplementedItemServiceServer can be embedded to have forward compatible implementations.
type UnimplementedItemServiceServer struct {
}

func (*UnimplementedItemServiceServer) Warehouse(ctx context.Context, req *WarehouseRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Warehouse not implemented")
}
func (*UnimplementedItemServiceServer) Shelf(ctx context.Context, req *ShelfRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shelf not implemented")
}
func (*UnimplementedItemServiceServer) Purchase(ctx context.Context, req *PurchaseRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Purchase not implemented")
}

func RegisterItemServiceServer(s *grpc.Server, srv ItemServiceServer) {
	s.RegisterService(&_ItemService_serviceDesc, srv)
}

func _ItemService_Warehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).Warehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/item.ItemService/Warehouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).Warehouse(ctx, req.(*WarehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_Shelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShelfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).Shelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/item.ItemService/Shelf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).Shelf(ctx, req.(*ShelfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_Purchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).Purchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/item.ItemService/Purchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).Purchase(ctx, req.(*PurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ItemService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "item.ItemService",
	HandlerType: (*ItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Warehouse",
			Handler:    _ItemService_Warehouse_Handler,
		},
		{
			MethodName: "Shelf",
			Handler:    _ItemService_Shelf_Handler,
		},
		{
			MethodName: "Purchase",
			Handler:    _ItemService_Purchase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "item.proto",
}

func (m *WarehouseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WarehouseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WarehouseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CostPrice != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.CostPrice))
		i--
		dAtA[i] = 0x20
	}
	if m.SalePrice != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.SalePrice))
		i--
		dAtA[i] = 0x18
	}
	if m.Quantity != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Quantity))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShelfRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShelfRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShelfRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PurchaseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PurchaseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PurchaseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintItem(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PurchaseItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PurchaseItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PurchaseItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Quantity != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Quantity))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ItemId) > 0 {
		i -= len(m.ItemId)
		copy(dAtA[i:], m.ItemId)
		i = encodeVarintItem(dAtA, i, uint64(len(m.ItemId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintItem(dAtA []byte, offset int, v uint64) int {
	offset -= sovItem(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WarehouseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Quantity != 0 {
		n += 1 + sovItem(uint64(m.Quantity))
	}
	if m.SalePrice != 0 {
		n += 1 + sovItem(uint64(m.SalePrice))
	}
	if m.CostPrice != 0 {
		n += 1 + sovItem(uint64(m.CostPrice))
	}
	return n
}

func (m *ShelfRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovItem(uint64(m.Status))
	}
	return n
}

func (m *PurchaseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovItem(uint64(l))
		}
	}
	return n
}

func (m *PurchaseItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ItemId)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Quantity != 0 {
		n += 1 + sovItem(uint64(m.Quantity))
	}
	return n
}

func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovItem(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozItem(x uint64) (n int) {
	return sovItem(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WarehouseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WarehouseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WarehouseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SalePrice", wireType)
			}
			m.SalePrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SalePrice |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CostPrice", wireType)
			}
			m.CostPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CostPrice |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShelfRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShelfRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShelfRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PurchaseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PurchaseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PurchaseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &PurchaseItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PurchaseItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PurchaseItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PurchaseItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipItem(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowItem
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowItem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowItem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthItem
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupItem
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthItem
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthItem        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowItem          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupItem = fmt.Errorf("proto: unexpected end of group")
)
